import subprocess
import sys
import os
from datetime import datetime

def run_command_safe(command, description, cwd=None):
    """Ex√©cute une commande de mani√®re s√©curis√©e pour l'encodage"""
    print(f"\nüì• {description}...")
    
    try:
        # Configuration sp√©ciale pour Windows et l'encodage
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        # Utiliser shell=True sur Windows pour √©viter les probl√®mes d'encodage
        if sys.platform == "win32":
            cmd_str = ' '.join(f'"{arg}"' if ' ' in arg else arg for arg in command)
            result = subprocess.run(
                cmd_str,
                cwd=cwd,
                shell=True,
                env=env,
                text=True,
                capture_output=True,
                encoding='utf-8',
                errors='replace'
            )
        else:
            result = subprocess.run(
                command,
                cwd=cwd,
                env=env,
                text=True,
                capture_output=True,
                encoding='utf-8',
                errors='replace'
            )
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout and result.stdout.strip():
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    clean_line = line.encode('ascii', 'ignore').decode('ascii')
                    if clean_line.strip():
                        print(f"   {clean_line}")
            return True, result.returncode
        else:
            print(f"‚ùå {description} - Code de retour: {result.returncode}")
            if result.stderr and result.stderr.strip():
                print(f"Erreur : {result.stderr.strip()}")
            return False, result.returncode
            
    except Exception as e:
        print(f"‚ùå {description} - Erreur inattendue : {e}")
        return False, -1

def update_strava_data():
    """Met √† jour les donn√©es Strava et les transformations"""
    
    print("üîÑ MISE √Ä JOUR DES DONN√âES STRAVA")
    print("=" * 40)
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # V√©rifications pr√©liminaires
    if not os.path.exists('src/extract/strava_extractor.py'):
        print("‚ùå Script d'extraction non trouv√©")
        return False
    
    if not os.path.exists('.env'):
        print("‚ùå Fichier .env non trouv√©")
        return False
    
    try:
        # 1. Extraction (v√©rifier s'il y a de nouvelles donn√©es)
        success, return_code = run_command_safe(
            [sys.executable, "src/extract/strava_extractor.py"],
            "V√©rification de nouvelles donn√©es Strava"
        )
        
        if not success:
            print("‚ùå √âchec de l'extraction")
            return False
        
        # Si le code de retour est 0 mais qu'il n'y a pas de nouvelles donn√©es
        # (le script modifi√© retourne 0 m√™me sans nouvelles donn√©es)
        # On peut d√©tecter cela dans les logs
        
        # 2. Transformations (seulement si il y avait des donn√©es √† traiter)
        dbt_path = "src/transform/dbt_project"
        if not os.path.exists(dbt_path):
            print(f"‚ùå Dossier dbt non trouv√© : {dbt_path}")
            return False
        
        print("\nüîÑ Mise √† jour des transformations...")
        success_dbt, _ = run_command_safe(
            ["dbt", "run"],
            "Transformations dbt",
            cwd=dbt_path
        )
        
        if not success_dbt:
            print("‚ùå √âchec des transformations")
            return False
        
        # 3. V√©rification rapide (optionnel)
        if os.path.exists("check_transformed_data.py"):
            print("\nüîç V√©rification des donn√©es...")
            run_command_safe(
                [sys.executable, "check_transformed_data.py"],
                "V√©rification des donn√©es"
            )
        
        print("\n" + "=" * 40)
        print("‚úÖ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS !")
        print("üéØ Vos donn√©es sont √† jour dans le dashboard")
        print("\nüöÄ Pour voir vos donn√©es :")
        print("   python run_dashboard.py")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        return False

def update_strava_data_smart():
    """Version intelligente qui s'arr√™te s'il n'y a pas de nouvelles donn√©es"""
    
    print("üîÑ MISE √Ä JOUR INTELLIGENTE DES DONN√âES STRAVA")
    print("=" * 50)
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # V√©rifications pr√©liminaires
    if not os.path.exists('src/extract/strava_extractor.py'):
        print("‚ùå Script d'extraction non trouv√©")
        return False
    
    if not os.path.exists('.env'):
        print("‚ùå Fichier .env non trouv√©")
        return False
    
    try:
        # 1. Extraction avec d√©tection intelligente
        print("\nüîç V√©rification de nouvelles activit√©s...")
        
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        if sys.platform == "win32":
            cmd_str = f'"{sys.executable}" "src/extract/strava_extractor.py"'
            result = subprocess.run(
                cmd_str,
                shell=True,
                env=env,
                text=True,
                capture_output=True,
                encoding='utf-8',
                errors='replace'
            )
        else:
            result = subprocess.run(
                [sys.executable, "src/extract/strava_extractor.py"],
                env=env,
                text=True,
                capture_output=True,
                encoding='utf-8',
                errors='replace'
            )
        
        # Analyser la sortie pour d√©tecter s'il y a de nouvelles donn√©es
        output = result.stdout if result.stdout else ""
        
        # Afficher la sortie nettoy√©e
        if output:
            lines = output.strip().split('\n')
            for line in lines:
                clean_line = line.encode('ascii', 'ignore').decode('ascii')
                if clean_line.strip():
                    print(f"   {clean_line}")
        
        # V√©rifier si le processus s'est arr√™t√© car pas de nouvelles donn√©es
        if "Aucune nouvelle activite - Processus termine" in output:
            print("\nüéØ AUCUNE NOUVELLE ACTIVIT√â D√âTECT√âE")
            print("‚úÖ Vos donn√©es sont d√©j√† √† jour !")
            print("üìä Vous pouvez lancer le dashboard : python run_dashboard.py")
            return True  # Succ√®s, mais pas de traitement n√©cessaire
        
        if result.returncode != 0:
            print("‚ùå √âchec de l'extraction")
            if result.stderr:
                print(f"Erreur : {result.stderr}")
            return False
        
        # Si on arrive ici, il y a de nouvelles donn√©es √† traiter
        print("‚úÖ Nouvelles donn√©es d√©tect√©es - Poursuite du traitement")
        
        # 2. Transformations dbt
        dbt_path = "src/transform/dbt_project"
        if not os.path.exists(dbt_path):
            print(f"‚ùå Dossier dbt non trouv√© : {dbt_path}")
            return False
        
        success_dbt, _ = run_command_safe(
            ["dbt", "run"],
            "Mise √† jour des transformations",
            cwd=dbt_path
        )
        
        if not success_dbt:
            print("‚ùå √âchec des transformations")
            return False
        
        # 3. V√©rification rapide (optionnel)
        if os.path.exists("check_transformed_data.py"):
            run_command_safe(
                [sys.executable, "check_transformed_data.py"],
                "V√©rification des donn√©es"
            )
        
        print("\n" + "=" * 50)
        print("üéâ NOUVELLES DONN√âES TRAIT√âES AVEC SUCC√àS !")
        print("üéØ Votre dashboard est maintenant √† jour")
        print("\nüöÄ Pour voir vos nouvelles donn√©es :")
        print("   python run_dashboard.py")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        return False

if __name__ == "__main__":
    # Utiliser la version intelligente par d√©faut
    success = update_strava_data_smart()
    
    if not success:
        print("\nüí° Conseil : Essayez d'ex√©cuter les √©tapes manuellement :")
        print("   1. python src/extract/strava_extractor.py")
        print("   2. cd src/transform/dbt_project && dbt run")
        sys.exit(1)
